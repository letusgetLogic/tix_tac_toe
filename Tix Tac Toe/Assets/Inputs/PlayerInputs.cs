//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player Red"",
            ""id"": ""600159da-6f81-4144-9e27-626385fe239a"",
            ""actions"": [
                {
                    ""name"": ""Topdown Move"",
                    ""type"": ""Value"",
                    ""id"": ""a8d0be35-849d-4624-b854-b2bb1f830993"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""a66b08e0-7691-4a7e-932c-0d888d6205d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bd4ffcdc-4a35-416a-b6f4-cbc7cc568f34"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f56159f2-1d18-4503-9875-55d49925bb6e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""53c05881-c9e0-43a7-a486-71cd7324fb32"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1d99c03-b5d1-47ad-9d65-e0f86e583449"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bbd3d5e5-d521-4d5e-b699-777945e82631"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4bea4edc-7b5a-449a-a187-852fb004451f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Blue"",
            ""id"": ""f27143dc-b260-459e-9e9e-a4ec837996ee"",
            ""actions"": [
                {
                    ""name"": ""Topdown Move"",
                    ""type"": ""Value"",
                    ""id"": ""c6ce9fbf-ea8a-49b4-9f4f-72527d7da48e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""d8d23a85-a989-4933-a0e4-240437de36a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""44c578af-8f53-44bb-a268-8c40c7cf2972"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ee4270c8-8e94-42d4-a581-03342b3f0838"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c1251fe-4f32-4db3-a2c2-ae736d1fbb16"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7cfb6dfc-d143-4034-b573-3e124239b51d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0b530d90-41f9-42f0-8b0d-67649803a08a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Topdown Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43cf33d3-1baa-4de0-a38a-5064597cd1a1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Red
        m_PlayerRed = asset.FindActionMap("Player Red", throwIfNotFound: true);
        m_PlayerRed_TopdownMove = m_PlayerRed.FindAction("Topdown Move", throwIfNotFound: true);
        m_PlayerRed_Press = m_PlayerRed.FindAction("Press", throwIfNotFound: true);
        // Player Blue
        m_PlayerBlue = asset.FindActionMap("Player Blue", throwIfNotFound: true);
        m_PlayerBlue_TopdownMove = m_PlayerBlue.FindAction("Topdown Move", throwIfNotFound: true);
        m_PlayerBlue_Press = m_PlayerBlue.FindAction("Press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Red
    private readonly InputActionMap m_PlayerRed;
    private List<IPlayerRedActions> m_PlayerRedActionsCallbackInterfaces = new List<IPlayerRedActions>();
    private readonly InputAction m_PlayerRed_TopdownMove;
    private readonly InputAction m_PlayerRed_Press;
    public struct PlayerRedActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerRedActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TopdownMove => m_Wrapper.m_PlayerRed_TopdownMove;
        public InputAction @Press => m_Wrapper.m_PlayerRed_Press;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRedActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerRedActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerRedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerRedActionsCallbackInterfaces.Add(instance);
            @TopdownMove.started += instance.OnTopdownMove;
            @TopdownMove.performed += instance.OnTopdownMove;
            @TopdownMove.canceled += instance.OnTopdownMove;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(IPlayerRedActions instance)
        {
            @TopdownMove.started -= instance.OnTopdownMove;
            @TopdownMove.performed -= instance.OnTopdownMove;
            @TopdownMove.canceled -= instance.OnTopdownMove;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(IPlayerRedActions instance)
        {
            if (m_Wrapper.m_PlayerRedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerRedActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerRedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerRedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerRedActions @PlayerRed => new PlayerRedActions(this);

    // Player Blue
    private readonly InputActionMap m_PlayerBlue;
    private List<IPlayerBlueActions> m_PlayerBlueActionsCallbackInterfaces = new List<IPlayerBlueActions>();
    private readonly InputAction m_PlayerBlue_TopdownMove;
    private readonly InputAction m_PlayerBlue_Press;
    public struct PlayerBlueActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerBlueActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TopdownMove => m_Wrapper.m_PlayerBlue_TopdownMove;
        public InputAction @Press => m_Wrapper.m_PlayerBlue_Press;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBlue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBlueActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerBlueActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerBlueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerBlueActionsCallbackInterfaces.Add(instance);
            @TopdownMove.started += instance.OnTopdownMove;
            @TopdownMove.performed += instance.OnTopdownMove;
            @TopdownMove.canceled += instance.OnTopdownMove;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(IPlayerBlueActions instance)
        {
            @TopdownMove.started -= instance.OnTopdownMove;
            @TopdownMove.performed -= instance.OnTopdownMove;
            @TopdownMove.canceled -= instance.OnTopdownMove;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(IPlayerBlueActions instance)
        {
            if (m_Wrapper.m_PlayerBlueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerBlueActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerBlueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerBlueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerBlueActions @PlayerBlue => new PlayerBlueActions(this);
    public interface IPlayerRedActions
    {
        void OnTopdownMove(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
    }
    public interface IPlayerBlueActions
    {
        void OnTopdownMove(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
    }
}
